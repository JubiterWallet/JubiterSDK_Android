apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'


android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        externalNativeBuild {
            cmake {
                cppFlags "",
                        "-std=c++11",
                        "-frtti",
                        "-fexceptions",
                        "-DDEBUG",
//                        "-DHC",   // 启用HC代码
//                        "-DJSON_HAS_INT64",  // JsonCpp 64位库编译失败，启用该标记也失败
                        "-DHAVE_ENDIAN_H"

                arguments '-DANDROID_TOOLCHAIN=clang',      // 工具链更新，NDK 15c规定不再支持gcc，但gcc暂未移除，现项目改为clang工具链编译
                        // 相关说明：https://developer.android.com/ndk/downloads/revision_history.html?hl=zh-cn
                        "-DANDROID_STL=c++_static",      // 使用库: gnustl_static、stlport_static等，详见Android NDK官网。CMake默认使用 gnustl_static
                        "-DANDROID_ARM_MODE=arm",            // 如果不添加，在编译 polarssl 库里 bignum 中的汇编时会报错 (*)
                        "-DANDROID_PLATFORM=android-19"
            }

            ndk {
                abiFilters "armeabi-v7a"
            }

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'generated/main/java']
            }
            proto {
                // proto 文件所在路径
                srcDir 'protos'
            }
        }
    }

}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.9.1'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }

    // 配置生成目录，编译后在 build 目录下生成对应的 java 文件
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                java { }
            }
        }
    }

}





dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    androidTestImplementation("androidx.test.ext:junit:1.1.1")
    androidTestImplementation("androidx.test:runner:1.1.1")
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation 'com.google.protobuf:protobuf-java:3.9.1'

}
